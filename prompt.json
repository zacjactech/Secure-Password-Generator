{
  "project": {
    "name": "Password Generator + Secure Vault MVP",
    "goal": "Build a privacy-first web app that allows users to generate strong passwords and securely store them in a personal encrypted vault.",
    "stack": {
      "frontend": "Next.js (TypeScript, minimal UI, hosted on Vercel)",
      "backend": "Next.js API routes (TypeScript)",
      "database": "MongoDB Atlas (Free Tier)",
      "auth": "Email + Password with bcrypt hashing",
      "crypto": "Web Crypto API using PBKDF2 (key derivation) + AES-GCM (encryption)"
    },
    "features": {
      "must_haves": [
        "Password generator with adjustable length and character options (numbers, letters, symbols, exclude look-alikes).",
        "Simple email/password authentication.",
        "Vault items with fields: title, username, password, URL, notes.",
        "Client-side encryption for all vault data.",
        "Copy to clipboard with auto-clear (~10–20 seconds).",
        "Basic search/filter for vault items."
      ],
      "nice_to_haves": [
        "2FA (TOTP).",
        "Tags or folders for organization.",
        "Dark mode toggle.",
        "Export/import encrypted file."
      ]
    },
    "security": {
      "client_side_encryption": "All vault content is encrypted on the client before being sent to the server.",
      "key_derivation": "PBKDF2 with SHA-256, 200,000 iterations, salt stored per user.",
      "cipher_algorithm": "AES-GCM (256-bit key, 96-bit IV).",
      "auth_security": "Passwords hashed with bcrypt, JWT or HttpOnly cookie session management.",
      "privacy": "Server never stores or logs plaintext vault data."
    },
    "data_model": {
      "users": {
        "_id": "ObjectId",
        "email": "string",
        "passwordHash": "bcrypt hash",
        "encryptionSalt": "base64 string",
        "createdAt": "ISODate"
      },
      "vault_items": {
        "_id": "ObjectId",
        "userId": "ObjectId (FK to users)",
        "ciphertext": "base64 string",
        "iv": "base64 string",
        "title": "optional plaintext for search or encrypted",
        "createdAt": "ISODate",
        "updatedAt": "ISODate",
        "tags": "optional array of strings"
      }
    },
    "api_routes": {
      "auth": {
        "POST /api/auth/signup": "Create new user (store bcrypt hash and encryption salt).",
        "POST /api/auth/login": "Authenticate and issue session cookie or JWT.",
        "POST /api/auth/logout": "Destroy session."
      },
      "vault": {
        "GET /api/vault": "Fetch encrypted vault items for authenticated user.",
        "POST /api/vault": "Save new encrypted item.",
        "PUT /api/vault/:id": "Update existing encrypted item.",
        "DELETE /api/vault/:id": "Delete an item.",
        "POST /api/export": "Export all encrypted vault data as encrypted JSON."
      },
      "optional": {
        "POST /api/2fa/enable": "Enable TOTP two-factor authentication.",
        "POST /api/2fa/verify": "Verify TOTP during login."
      }
    },
    "frontend": {
      "ui_description": "Minimal fast interface built with Next.js and Tailwind CSS. Includes generator panel, vault list, search bar, and dark mode toggle.",
      "pages": [
        "Signup / Login page with form validation",
        "Dashboard (vault list, add/edit/delete)",
        "Password generator component (slider + options)",
        "Search/filter bar",
        "Optional settings page (dark mode, export/import)"
      ]
    },
    "crypto_code": {
      "deriveKey": "PBKDF2(password + userSalt) → AES-GCM key",
      "encryptItem": "AES-GCM(plaintextJSON, randomIV) → ciphertext + iv",
      "decryptItem": "AES-GCM(ciphertext, iv) → plaintextJSON",
      "notes": "Master key stored only in memory. Salt stored in DB. All vault data sent as ciphertext only."
    },
    "password_generator": {
      "description": "Client-side generator using crypto.getRandomValues with configurable options.",
      "parameters": {
        "length": "integer (8–64)",
        "include_lower": "boolean",
        "include_upper": "boolean",
        "include_numbers": "boolean",
        "include_symbols": "boolean",
        "exclude_lookalikes": "boolean"
      },
      "sample_output": "K8z#tLq9vDfP"
    },
    "clipboard_behavior": {
      "copy_to_clipboard": "navigator.clipboard.writeText(...)",
      "auto_clear": "Overwrite clipboard with empty string after 12–15 seconds (best-effort)"
    },
    "deployment": {
      "frontend_backend_host": "Vercel (Next.js app with API routes)",
      "database": "MongoDB Atlas",
      "secrets": {
        "MONGODB_URI": "connection string",
        "JWT_SECRET": "random string",
        "BCRYPT_ROUNDS": "10–12"
      }
    },
    "readme_notes": {
      "crypto_summary": "Using Web Crypto API for AES-GCM encryption. PBKDF2 derives key from user password + salt. Vault data is encrypted client-side so the server never stores plaintext.",
      "privacy_note": "If user forgets master password, vault data is unrecoverable (by design).",
      "quickstart": [
        "Clone repo",
        "pnpm install",
        "Set .env values",
        "Run with pnpm dev",
        "Visit /signup → /vault"
      ]
    },
    "acceptance_criteria": {
      "signup_login": "Working auth with bcrypt and session handling.",
      "encryption": "Only encrypted blobs visible in MongoDB.",
      "generator": "Instant password generation with options.",
      "copy_clear": "Clipboard clears itself after ~12s.",
      "search": "Basic search/filter working client-side.",
      "crud": "Add, edit, delete vault entries.",
      "ui": "Clean, minimal interface with no performance lag."
    },
    "timeline": {
      "estimated_duration": "3–5 days",
      "milestones": {
        "Day 0": "Setup repo, Vercel, MongoDB, .env",
        "Day 1": "Implement signup/login + DB models + bcrypt hashing.",
        "Day 2": "Implement vault CRUD, client encryption, generator.",
        "Day 3": "Add search, clipboard logic, edit/delete, basic styling.",
        "Day 4-5": "Optional features (2FA, export/import, dark mode) + README + deploy."
      }
    },
    "output_requirements": {
      "deliverables": [
        "Live demo URL (Vercel)",
        "GitHub repo with README",
        "Short crypto explanation (2–3 lines)",
        "60–90 sec screen-recording of full flow (generate → save → search → edit → delete)"
      ]
    },
    "inspiration": {
      "examples": [
        "Bitwarden",
        "Proton Pass",
        "1Password minimal design"
      ]
    }
  }
}
